// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package access_point

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if ackcompare.HasNilDifference(a.ko.Spec.AccountID, b.ko.Spec.AccountID) {
		delta.Add("Spec.AccountID", a.ko.Spec.AccountID, b.ko.Spec.AccountID)
	} else if a.ko.Spec.AccountID != nil && b.ko.Spec.AccountID != nil {
		if *a.ko.Spec.AccountID != *b.ko.Spec.AccountID {
			delta.Add("Spec.AccountID", a.ko.Spec.AccountID, b.ko.Spec.AccountID)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Bucket, b.ko.Spec.Bucket) {
		delta.Add("Spec.Bucket", a.ko.Spec.Bucket, b.ko.Spec.Bucket)
	} else if a.ko.Spec.Bucket != nil && b.ko.Spec.Bucket != nil {
		if *a.ko.Spec.Bucket != *b.ko.Spec.Bucket {
			delta.Add("Spec.Bucket", a.ko.Spec.Bucket, b.ko.Spec.Bucket)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.BucketAccountID, b.ko.Spec.BucketAccountID) {
		delta.Add("Spec.BucketAccountID", a.ko.Spec.BucketAccountID, b.ko.Spec.BucketAccountID)
	} else if a.ko.Spec.BucketAccountID != nil && b.ko.Spec.BucketAccountID != nil {
		if *a.ko.Spec.BucketAccountID != *b.ko.Spec.BucketAccountID {
			delta.Add("Spec.BucketAccountID", a.ko.Spec.BucketAccountID, b.ko.Spec.BucketAccountID)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Name, b.ko.Spec.Name) {
		delta.Add("Spec.Name", a.ko.Spec.Name, b.ko.Spec.Name)
	} else if a.ko.Spec.Name != nil && b.ko.Spec.Name != nil {
		if *a.ko.Spec.Name != *b.ko.Spec.Name {
			delta.Add("Spec.Name", a.ko.Spec.Name, b.ko.Spec.Name)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.PublicAccessBlockConfiguration, b.ko.Spec.PublicAccessBlockConfiguration) {
		delta.Add("Spec.PublicAccessBlockConfiguration", a.ko.Spec.PublicAccessBlockConfiguration, b.ko.Spec.PublicAccessBlockConfiguration)
	} else if a.ko.Spec.PublicAccessBlockConfiguration != nil && b.ko.Spec.PublicAccessBlockConfiguration != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.PublicAccessBlockConfiguration.BlockPublicACLs, b.ko.Spec.PublicAccessBlockConfiguration.BlockPublicACLs) {
			delta.Add("Spec.PublicAccessBlockConfiguration.BlockPublicACLs", a.ko.Spec.PublicAccessBlockConfiguration.BlockPublicACLs, b.ko.Spec.PublicAccessBlockConfiguration.BlockPublicACLs)
		} else if a.ko.Spec.PublicAccessBlockConfiguration.BlockPublicACLs != nil && b.ko.Spec.PublicAccessBlockConfiguration.BlockPublicACLs != nil {
			if *a.ko.Spec.PublicAccessBlockConfiguration.BlockPublicACLs != *b.ko.Spec.PublicAccessBlockConfiguration.BlockPublicACLs {
				delta.Add("Spec.PublicAccessBlockConfiguration.BlockPublicACLs", a.ko.Spec.PublicAccessBlockConfiguration.BlockPublicACLs, b.ko.Spec.PublicAccessBlockConfiguration.BlockPublicACLs)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.PublicAccessBlockConfiguration.BlockPublicPolicy, b.ko.Spec.PublicAccessBlockConfiguration.BlockPublicPolicy) {
			delta.Add("Spec.PublicAccessBlockConfiguration.BlockPublicPolicy", a.ko.Spec.PublicAccessBlockConfiguration.BlockPublicPolicy, b.ko.Spec.PublicAccessBlockConfiguration.BlockPublicPolicy)
		} else if a.ko.Spec.PublicAccessBlockConfiguration.BlockPublicPolicy != nil && b.ko.Spec.PublicAccessBlockConfiguration.BlockPublicPolicy != nil {
			if *a.ko.Spec.PublicAccessBlockConfiguration.BlockPublicPolicy != *b.ko.Spec.PublicAccessBlockConfiguration.BlockPublicPolicy {
				delta.Add("Spec.PublicAccessBlockConfiguration.BlockPublicPolicy", a.ko.Spec.PublicAccessBlockConfiguration.BlockPublicPolicy, b.ko.Spec.PublicAccessBlockConfiguration.BlockPublicPolicy)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.PublicAccessBlockConfiguration.IgnorePublicACLs, b.ko.Spec.PublicAccessBlockConfiguration.IgnorePublicACLs) {
			delta.Add("Spec.PublicAccessBlockConfiguration.IgnorePublicACLs", a.ko.Spec.PublicAccessBlockConfiguration.IgnorePublicACLs, b.ko.Spec.PublicAccessBlockConfiguration.IgnorePublicACLs)
		} else if a.ko.Spec.PublicAccessBlockConfiguration.IgnorePublicACLs != nil && b.ko.Spec.PublicAccessBlockConfiguration.IgnorePublicACLs != nil {
			if *a.ko.Spec.PublicAccessBlockConfiguration.IgnorePublicACLs != *b.ko.Spec.PublicAccessBlockConfiguration.IgnorePublicACLs {
				delta.Add("Spec.PublicAccessBlockConfiguration.IgnorePublicACLs", a.ko.Spec.PublicAccessBlockConfiguration.IgnorePublicACLs, b.ko.Spec.PublicAccessBlockConfiguration.IgnorePublicACLs)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.PublicAccessBlockConfiguration.RestrictPublicBuckets, b.ko.Spec.PublicAccessBlockConfiguration.RestrictPublicBuckets) {
			delta.Add("Spec.PublicAccessBlockConfiguration.RestrictPublicBuckets", a.ko.Spec.PublicAccessBlockConfiguration.RestrictPublicBuckets, b.ko.Spec.PublicAccessBlockConfiguration.RestrictPublicBuckets)
		} else if a.ko.Spec.PublicAccessBlockConfiguration.RestrictPublicBuckets != nil && b.ko.Spec.PublicAccessBlockConfiguration.RestrictPublicBuckets != nil {
			if *a.ko.Spec.PublicAccessBlockConfiguration.RestrictPublicBuckets != *b.ko.Spec.PublicAccessBlockConfiguration.RestrictPublicBuckets {
				delta.Add("Spec.PublicAccessBlockConfiguration.RestrictPublicBuckets", a.ko.Spec.PublicAccessBlockConfiguration.RestrictPublicBuckets, b.ko.Spec.PublicAccessBlockConfiguration.RestrictPublicBuckets)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.VPCConfiguration, b.ko.Spec.VPCConfiguration) {
		delta.Add("Spec.VPCConfiguration", a.ko.Spec.VPCConfiguration, b.ko.Spec.VPCConfiguration)
	} else if a.ko.Spec.VPCConfiguration != nil && b.ko.Spec.VPCConfiguration != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.VPCConfiguration.VPCID, b.ko.Spec.VPCConfiguration.VPCID) {
			delta.Add("Spec.VPCConfiguration.VPCID", a.ko.Spec.VPCConfiguration.VPCID, b.ko.Spec.VPCConfiguration.VPCID)
		} else if a.ko.Spec.VPCConfiguration.VPCID != nil && b.ko.Spec.VPCConfiguration.VPCID != nil {
			if *a.ko.Spec.VPCConfiguration.VPCID != *b.ko.Spec.VPCConfiguration.VPCID {
				delta.Add("Spec.VPCConfiguration.VPCID", a.ko.Spec.VPCConfiguration.VPCID, b.ko.Spec.VPCConfiguration.VPCID)
			}
		}
	}

	return delta
}
